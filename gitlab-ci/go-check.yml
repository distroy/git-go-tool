include:
  - '/gitlab-ci/base-script.yml'

.go-build:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    changes:
      - "**/**.go"
  script:
    - !reference [.color-message, script]
    - !reference [.echo-and-run, script]
    # 检查服务 build 是否都可以成功
    - |
      if [[ -$GO_BUILD_TARGET_DIR == - ]]; then
        echo_msgg "no need run go build"
      else
        for i in $(ls $GO_BUILD_TARGET_DIR/*/*.go); do
          _service_dir="$(dirname "$i")"
          echo "=== building service: $_service_dir"
          _service_name="$(basename "$_service_dir")"
          cd "$_service_dir"
          echo_and_run go build ${GO_FLAGS} -o "$_service_name" || exit $?
        done
      fi

.go-format:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    # changes:
    #   - "**/**.go"
  script:
    - !reference [.echo-and-run, script]
    - |
      GIT_MERGE_TARGET="$GO_FORMAT_DIFF_TARGET"
      GIT_MERGE_SOURCE="$GO_FORMAT_DIFF_SOURCE"
    - !reference [.go-install-tools, script]
    - !reference [.checkout-all-commits, script]
    - |
      if [[ "$GO_COGNITIVE_EXCLUDES" == "" ]]; then
        GO_FORMAT_EXCLUDES=GO_EXCLUDE_OPTIONS
      fi
    # 检查单元测试是否都可以通过
    # 获取 MR 2 个branch 的公共的 commit 节点(merge_base)
    - |
      merge_base=$(git merge-base $GIT_MERGE_TARGET $GIT_MERGE_SOURCE)
      echo "merge base: $merge_base"
    # 调用脚本，检查当前代码到 merge_base 的差异，并检查新代码中是否有复杂度过高的代码
    - |
      echo_and_run git-diff-go-format \
          -mode "$GIT_COMPARE_MODE" \
          -branch "$merge_base" \
          -import "$GO_FORMAT_CHECK_IMPORT" \
          -formated "$GO_FORMAT_CHECK_SOURCE_FORMATED" \
          -package "$GO_FORMAT_CHECK_PACKAGE_NAME" \
          -func-input-num "$GO_FORMAT_FUNC_INPUT_NUM_LIMIT" \
          -func-output-num "$GO_FORMAT_FUNC_OUTPUT_NUM_LIMIT" \
          -func-named-output "$GO_FORMAT_FUNC_OUTPUT_IF_NEED_NAMED" \
          -func-input-num-without-context "$GO_FORMAT_FUNC_INPUT_NUM_WITHOUT_CONTEXT" \
          -func-output-num-without-error "$GO_FORMAT_FUNC_OUTPUT_NUM_WITHOUT_ERROR" \
          -func-context-first "$GO_FORMAT_FUNC_INPUT_CONTEXT_FIRST" \
          -func-error-last "$GO_FORMAT_FUNC_OUTPUT_ERROR_LAST" \
          -func-context-error-match "$GO_FORMAT_FUNC_CONTEXT_ERROR_MATCH" \
          ${GO_FORMAT_EXCLUDES}

.go-cognitive:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    # changes:
    #   - "**/**.go"
  script:
    - !reference [.echo-and-run, script]
    - |
      GIT_MERGE_TARGET="$GO_COGNITIVE_DIFF_TARGET"
      GIT_MERGE_SOURCE="$GO_COGNITIVE_DIFF_SOURCE"
    - !reference [.go-install-tools, script]
    - !reference [.checkout-all-commits, script]
    - |
      if [[ "$GO_COGNITIVE_EXCLUDES" == "" ]]; then
        GO_COGNITIVE_EXCLUDES=GO_EXCLUDE_OPTIONS
      fi
    # 检查单元测试是否都可以通过
    # 获取 MR 2 个branch 的公共的 commit 节点(merge_base)
    - |
      merge_base=$(git merge-base $GIT_MERGE_TARGET $GIT_MERGE_SOURCE)
      echo "merge base: $merge_base"
    # 调用脚本，检查当前代码到 merge_base 的差异，并检查新代码中是否有复杂度过高的代码
    - |
      echo_and_run git-diff-go-cognitive \
          -over "$GO_COGNITIVE_OVER" \
          -mode "$GIT_COMPARE_MODE" \
          -branch "$merge_base" \
          ${GO_COGNITIVE_EXCLUDES}

.go-test:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    changes:
      - "**/**.go"
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(release|master|feature|test)/
  script:
    - !reference [.echo-and-run, script]
    # 检查单元测试是否都可以通过
    - echo_and_run go test -v ${GO_FLAGS} ${GO_TEST_FLAGS} ./...

.go-test-coverage:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(release|master|feature|test)/
    changes:
      - "**/**.go"
  script:
    - !reference [.echo-and-run, script]
    - |
      GIT_MERGE_TARGET="$GO_COVERAGE_DIFF_TARGET"
      GIT_MERGE_SOURCE="$GO_COVERAGE_DIFF_SOURCE"
    - !reference [.go-install-tools, script]
    - !reference [.checkout-all-commits, script]
    # 检查单元测试是否都可以通过
    - mkdir -pv "$(dirname "$GO_COVERAGE_FILE")"
    - echo_and_run go test -v ${GO_FLAGS} ${GO_TEST_FLAGS} ./... -coverprofile="$GO_COVERAGE_FILE"
    - |
      if [[ -$GO_COVERAGE_EXCLUDES == - ]]; then
        GO_COVERAGE_EXCLUDES="$GO_EXCLUDE_OPTIONS"
      fi
    # 获取 MR 2个branch 的公共的 commit 节点(merge_base)
    - |
      merge_base=$(git merge-base $GIT_MERGE_TARGET $GIT_MERGE_SOURCE)
      echo "merge base: $merge_base"
    - |
      echo_and_run git-diff-go-coverage \
          -rate "$GO_COVERAGE_RATE" \
          -mode "$GIT_COMPARE_MODE" \
          -branch "$merge_base" \
          -file "$GO_COVERAGE_FILE" \
          ${GO_COVERAGE_EXCLUDES}

.check-for-test:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(release|master|feature|test)/
  script:
    - !reference [.color-message, script]
    - !reference [.echo-and-run, script]
    - |
      function check_for_test() {
        local count=$(grep -r -i -E -n "$FOR_TEST_KEYWORD" . | wc -l)
        if (( count <= 0 )); then
          echo_msgg "do not find the keyword: \"$FOR_TEST_KEYWORD\""
          return
        fi

        echo_msgr "found the keyword: \"$FOR_TEST_KEYWORD\""
        echo_and_run grep -r -i -E -n "$FOR_TEST_KEYWORD" .
        return 1
      }
    - |
      if [[ -$FOR_TEST_KEYWORD == - ]]; then
        echo_msgg "no need check for test keyword"
      else
        check_for_test
      fi
