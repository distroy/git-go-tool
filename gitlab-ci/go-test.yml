.go-test:
  # 相同stage的job并行执行
  stage: go-check-stage
  image: "$GO_CHECK_IMAGE"
  only:
    refs:
      - merge_requests
    changes:
      - "**/**.go"
  except:
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(release|master|feature|test)/
  artifacts:
    when: always
    paths:
      - "$GO_COVERAGE_HTML"
  script:
    - !reference [.echo-and-run, script]
    # 准备 go coverage 的目录
    - mkdir -pv "$(dirname "$GO_COVERAGE_FILE")"
    - mkdir -pv "$(dirname "$GO_COVERAGE_HTML")"
    # 检查单元测试是否都可以通过
    - echo_and_run go test -v ${GO_FLAGS} ${GO_TEST_FLAGS} -p ${GO_TEST_PROCESSOR} ./... -coverprofile="$GO_COVERAGE_FILE"
    - echo_and_run env GOFLAGS="${GO_FLAGS}" go tool cover -html "$GO_COVERAGE_FILE" -o "$GO_COVERAGE_HTML"
